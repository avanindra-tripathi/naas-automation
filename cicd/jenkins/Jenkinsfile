pipeline {
	environment {

		PROJECT_NAME = 'NaaS' //Should be Repo-name
			PROJECT_MAL = 'NAAS'
			XUNIT_XML_RESULTS_PATH = '.'
			XUNIT_XML_FILE_PREFIX = 'generatedJUnitFiles/*/*/*.xml'
			XUNIT_THRESHOLDS_JSON_FILE = 'qgatethresholds/qgate1-xunit.json'

	}

	parameters {
		choice(choices: ['TEST4'], description: '', name: 'Environment')
		string(defaultValue: 'Monarch', description: '', name: 'MAL', trim: false)
		string(defaultValue: 'SOATest', description: '', name: 'TestTool', trim: false)
		choice(choices: ['Sanity'], description: '', name: 'TestType')
		string(defaultValue: 'EDGENAAS', description: '', name: 'Project', trim: false)
		string(defaultValue: 'EDGENAAS-21272', description: '', name: 'TestPlan', trim: false)
		string(defaultValue: 'TEST4', description: '', name: 'XrayEnvironment', trim: false)
	}

	/*
	https://www.jenkins.io/doc/book/pipeline/syntax/#agent
	Add agent sections in stages/stage if needed.
	 */

	agent any

	options {
		/*
		https://www.jenkins.io/doc/book/pipeline/syntax/#options
		 */
		/* skipDefaultCheckout true */
		timestamps()
		timeout(time: 1, unit: 'HOURS')
		buildDiscarder(logRotator(numToKeepStr: '4', daysToKeepStr: '8'))
		disableConcurrentBuilds()
		preserveStashes(buildCount: 10) //newly added
	}

	/*
	https://www.jenkins.io/doc/book/pipeline/syntax/#triggers
	 */
	triggers {
		pollSCM('* * * * *')
	}
	//Run ARCADE SOAtest tst files or projects
	stages {
		//Running test
		stage('QGate-2') {
			//Need to run with PWD uncommented to get workspace name
			//Then you can URL encode based on the documentation to add in your Local Settings file
			steps {
				script {
					println "Will test in ${params.MAL}"
					println "Workspace is : ${env.WORKSPACE}"

					bat '''

					            "C:/Program Files/Parasoft/SOAtest/9.10/soatestcli" -J-Dosgi.locking=none -data "%WORKSPACE%" -import "%WORKSPACE%/Sanity"
								"C:/Program Files/Parasoft/SOAtest/9.10/soatestcli" -J-Dosgi.locking=none -data "%WORKSPACE%" -resource "Sanity/ACTSanity.tst" -chmod -R 744 xxx.tst -config "soatest.user://Example Configuration" -report "%WORKSPACE%/SOATEST_REPORT.xml" -localsettings "C:/Users/AB99059/Desktop/LocalSetting/Localsettings.properties" -appconsole "stdout"


					           '''
					println 'C:/Program Files/parasoft/test/9.10_for_soatest_virtualize/configuration/*.log.'
				}
			}
		}

		//Build JUnit report for XRAY and set thresholds
		stage('Report') {
			steps {

				/*step([$class: 'XUnitPublisher',
				thresholds: [[$class: 'FailedThreshold', unstableThreshold: '1']],
				tools: [[$class: 'ParasoftSOAtest9xType', deleteOutputFiles: false, failIfNotNew: false, pattern: 'SOATEST_REPORT.xml', skipNoTestFiles: false, stopProcessingIfError: true]]])
				 */
				println "Work In-Progress"

			}
		}

		//XRAY import test execution results
		stage('xrayReport') {
			steps {

				println "Work In-Progress"
				//script {
				//Without parms below
				//jslJiraXrayResultImport('junit', 'generatedJUnitFiles/*/*/*.xml', 'This execution is automatically created when importing execution results from jenkins', 'ARCADE', 'XIS', 'XIS-13379', 'Test1')

				//With parms below
				//jslJiraXrayResultImport('junit', 'generatedJUnitFiles/*/*/*.xml', 'This execution is automatically created when importing execution results from jenkins', '${TestTool}', '${Project}', '${TestPlan}', '${XrayEnvironment}')
				//}

			}
		} // ... snip ...
	} //stages


	post {
		/*
		https://www.jenkins.io/doc/book/pipeline/syntax/#post
		Always post somewhere the watermark:
		- md5sum of Jenkinsfile
		- Output of the Jenkinsfile checker output
		 */

		success {
			/* Contract Validation Gate */
			println("This is for success")
			//jslNotification('success')
			//cleanWs()
		}
		//failure {
		/* Contract Validation Gate */
		//println("This is for failure")
		//jslNotification('failure')
		//cleanWs()
		//}
		//unstable {
		/* Contract Validation Gate */
		//println("This is for unstable")
		//jslNotification('unstable')
		//cleanWs()
		//}
		//always{
		//jslEmailNotification('avanindra.tripathi@lumen.com', 'Job Name:${JOB_NAME} BuildNo:${BUILD_NUMBER} Status:${BUILD_STATUS}','**/ARCADE_REPORT.html',''' Build Url : ${BUILD_URL}''')

		// }


	}
	 //post
} //Pipeline