/* groovylint-disable LineLength*/
/*
Library declaration.
Notes:
identifier includes the version of the library (git tag / branch)
remote includes the repository git url
credentialsId needs to be of the type SSH key in Jenkins
_ at the end of the declaration loads the whole library
This section always runs in the master jenkins.
Try catch block will help with first connection failures.
 */

try {
	library(
		identifier: 'jsl-jenkins-shared-library-local@master',
		retriever: modernSCM(
			[
				$class: 'GitSCMSource',
				remote: '/app/jenkins/git/jsl-jenkins-shared-library.git',
				//extensions: [[$class: 'WipeWorkspace']]
				extensions: [[$class: 'CleanBeforeCheckout']]
			]))_
} catch (Exception Ex) {
	library(
		identifier: 'jsl-jenkins-shared-library@master',
		retriever: modernSCM(
			[
				$class: 'GitSCMSource',
				remote: 'git@github.com:CenturyLink/jsl-jenkins-shared-library.git',
				credentialsId: 'SCMAUTO_SSH_DEVOPS_PIPELINE',
				//extensions: [[$class: 'WipeWorkspace']]
				extensions: [[$class: 'CleanBeforeCheckout']]
			]))
}
pipeline {
	environment {
		/* Credentials:
		GITHUB_TOKEN_CREDENTIALS github token, jenkins user password credential
		GITHUB_SSH_CREDENTIALS github ssh private key, jenkins private key credential.
		DOCKER_CREDENTIALS Docker access info, jenkins secret file credential with environment variables to export
		KUBE_CREDENTIALS Kubernetes access info, jenkins secret file credential with environment variables to export. For PRs.
		KUBE_CREDENTIALS_TEST Kubernetes access info, jenkins secret file credential with environment variables to export. For branches.
		AMAZON_CREDENTIALS AWS access info, jenkins secret file credential with environment variables to export
		SONARQUBE_CREDENTIALS Sonarqube access info, jenkins secret text
		GCP_CREDENTIALS GCP access info, jenkins secret file credential with environment variables to export
		JIRA_CREDENTIALS Jira access info, jenkins secret file credential with environment variables to export
		MSTEAMS_CREDENTIALS MS Teams access info, jenkins secret text
		 */

		GITHUB_TOKEN_CREDENTIALS = 'SCMAUTO_GITHUB'
			GITHUB_SSH_CREDENTIALS = 'SCMAUTO_SSH_DEVOPS_PIPELINE'
			DOCKER_CREDENTIALS = 'nexus-secrets-autotest'
			KUBE_CREDENTIALS = 'kube-secret-dev'
			KUBE_CREDENTIALS_TEST = 'kube-secret-test'
			SONARQUBE_CREDENTIALS = 'sonarscnprod'
			QUALITY_GATE_CREDENTIALS = 'qualitygate-secret'
			JIRA_CREDENTIALS = 'jira-credentials'
			AMAZON_CREDENTIALS = ''
			GCP_CREDENTIALS = ''
			MSTEAMS_CREDENTIALS = 'teams-secret'
			TAG = '${env.NODE_NAME}'
			XRAY_CREDENTIALS = 'xray-credentials' // (WAS) jira-xray-key
			JIRA_SERVER_INSTANCE_ID = 'CLOUD-482e318d-9fc6-4be6-9089-2646e78fcac3'

			//Deployment control credentialsId
			AUTHORIZED_USERS = 'authorized_users'
			DEPLOY_AUTH_TOKEN = 'deploy_auth_token'

			// Custom project variables
			//BRANCH_NAME = GIT_BRANCH.split('/')[-1].trim().toLowerCase()
			//COMMIT_ID = GIT_COMMIT.substring(0, 7).trim().toLowerCase()
			PULL_REQUEST = "pr-${env.CHANGE_ID}"
			PROJECT_NAME = 'ARCADE' //Should be Repo-name
			PROJECT_MAL = 'TESTAUTO'
			XUNIT_XML_RESULTS_PATH = '.'
			XUNIT_XML_FILE_PREFIX = 'generatedJUnitFiles/*/*/*.xml'
			XUNIT_THRESHOLDS_JSON_FILE = 'qgatethresholds/qgate1-xunit.json'

			//For destination images
			DOCKER_REPO = 'testauto-arcade' //MAL-NAME/Repo-Name
			IMAGE_NAME = "${env.PROJECT_NAME}"
			IMAGE_TAG = "${env.PULL_REQUEST}"
			/*KUBE_DOCKER_SECRET_NAME = "${env.PROJECT_NAME}-${env.PULL_REQUEST}"
			KUBE_DOCKER_SECRET_NAME_TEST = "${env.PROJECT_NAME}-${env.BRANCH_NAME}"
			KUBE_DOCKER_SECRET_NAME_PROD = "${env.PROJECT_NAME}-${env.BRANCH_NAME}"*/

			//App Specific
	}

	/*parameters {
	//      https://www.jenkins.io/doc/book/pipeline/syntax/#parameters
	choice(name: 'Environment', choices: ['TEST4', 'TEST2', 'TEST1'], description: '')
	choice(name: 'TestType', choices: ['Sanity'], description: '')
	choice(name: 'MAL', choices: ['ESHOP'], description: '')
	choice(name: 'TestTool', choices: ['STAF'], description: '')
	//choice(name: 'TAG', choices: ['NODE_NAME'], description: '')
	}*/

	parameters {
		choice(choices: ['TEST4'], description: '', name: 'Environment')
		string(defaultValue: 'Monarch', description: '', name: 'MAL', trim: false)
		string(defaultValue: 'SOATest', description: '', name: 'TestTool', trim: false)
		choice(choices: ['Sanity'], description: '', name: 'TestType')
		string(defaultValue: 'EDGENAAS', description: '', name: 'Project', trim: false)
		string(defaultValue: 'EDGENAAS-21272', description: '', name: 'TestPlan', trim: false)
		string(defaultValue: 'TEST4', description: '', name: 'XrayEnvironment', trim: false)
	}

	/*
	https://www.jenkins.io/doc/book/pipeline/syntax/#agent
	Add agent sections in stages/stage if needed.
	 */

	agent any

	options {
		/*
		https://www.jenkins.io/doc/book/pipeline/syntax/#options
		 */
		/* skipDefaultCheckout true */
		timestamps()
		timeout(time: 1, unit: 'HOURS')
		buildDiscarder(logRotator(numToKeepStr: '4', daysToKeepStr: '8'))
		disableConcurrentBuilds()
		preserveStashes(buildCount: 10) //newly added
	}

	/*
	https://www.jenkins.io/doc/book/pipeline/syntax/#triggers
	 */
	triggers {
		pollSCM('* * * * *')
	}
	//Run ARCADE SOAtest tst files or projects
	stages {
		//Running test
		stage('QGate-2') {
			//Need to run with PWD uncommented to get workspace name
			//Then you can URL encode based on the documentation to add in your Local Settings file
			steps {
				script {
					println "Will test in ${params.MAL}"
					println "Workspace is : ${env.WORKSPACE}"

					bat '' '

										            "C:/Program Files/Parasoft/SOAtest/9.10/soatestcli" -J-Dosgi.locking=none -data "%WORKSPACE%" -import "%WORKSPACE%/Sanity"
													"C:/Program Files/Parasoft/SOAtest/9.10/soatestcli" -J-Dosgi.locking=none -data "%WORKSPACE%" -resource "Sanity/ACTSanity.tst" -chmod -R 744 xxx.tst -config "soatest.user://Example Configuration" -report "%WORKSPACE%/SOATEST_REPORT.xml" -localsettings "C:/Users/AB99059/Desktop/LocalSetting/Localsettings.properties" -appconsole "stdout"


										           ' ''
					println 'C:/Program Files/parasoft/test/9.10_for_soatest_virtualize/configuration/*.log.'
				}
			}
		}

		//Build JUnit report for XRAY and set thresholds
		stage('Report') {
			steps {

				step([$class: 'XUnitPublisher',
						thresholds: [[$class: 'FailedThreshold', unstableThreshold: '1']],
						tools: [[$class: 'ParasoftSOAtest9xType', deleteOutputFiles: false, failIfNotNew: false, pattern: 'SOATEST_REPORT.xml', skipNoTestFiles: false, stopProcessingIfError: true]]])
				println "Workspace is : ${env.WORKSPACE}"

			}
		}

		//XRAY import test execution results
		stage('xrayReport') {
			steps {

				script {
					//Without parms below
					//jslJiraXrayResultImport('junit', 'generatedJUnitFiles/*/*/*.xml', 'This execution is automatically created when importing execution results from jenkins', 'ARCADE', 'XIS', 'XIS-13379', 'Test1')

					//With parms below
					jslJiraXrayResultImport('junit', 'generatedJUnitFiles/*/*/*.xml', 'This execution is automatically created when importing execution results from jenkins', '${TestTool}', '${Project}', '${TestPlan}', '${XrayEnvironment}')
				}

			}
		} // ... snip ...
	} //stages


	post {
		/*
		https://www.jenkins.io/doc/book/pipeline/syntax/#post
		Always post somewhere the watermark:
		- md5sum of Jenkinsfile
		- Output of the Jenkinsfile checker output
		 */

		success {
			/* Contract Validation Gate */
			println("This is for success")
			//jslNotification('success')
			//cleanWs()
		}
		failure {
			/* Contract Validation Gate */
			println("This is for failure")
			//jslNotification('failure')
			//cleanWs()
		}
		unstable {
			/* Contract Validation Gate */
			println("This is for unstable")
			//jslNotification('unstable')
			//cleanWs()
		}
		always {
			jslEmailNotification('avanindra.tripathi@lumen.com', 'Job Name:${JOB_NAME} BuildNo:${BUILD_NUMBER} Status:${BUILD_STATUS}', '**/ARCADE_REPORT.html', '' ' Build Url : ${BUILD_URL}' '')

		}

	} //post
} //Pipeline